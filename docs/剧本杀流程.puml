@startuml
actor 玩家
participant 服务器
participant 数据库
participant "游戏主控AI" as GM
participant "角色AI" as CA
participant "触发系统" as TS

== 会话初始化 ==
玩家 -> 服务器: 创建游戏会话
服务器 -> 数据库: 存储会话数据
服务器 -> GM: 初始化游戏剧本
GM -> 数据库: 保存游戏状态（剧本、角色）
GM -> CA: 生成剧本中的角色AI
CA -> 数据库: 存储角色AI状态

== 剧本选择与角色分配 ==
玩家 -> 服务器: 选择剧本
服务器 -> 数据库: 更新会话剧本信息
服务器 -> GM: 通知剧本选择
GM -> 玩家: 分配玩家角色（例如侦探）
GM -> 数据库: 保存角色分配

== 主线剧情：调查阶段 ==
玩家 -> 服务器: 请求初始线索
服务器 -> GM: 获取剧本线索集
GM -> 数据库: 检索线索数据
GM -> 玩家: 提供初始线索
玩家 -> CA: 审问角色AI（例如询问不在场证明）
CA -> 数据库: 记录互动
CA -> 玩家: 回复脚本化或动态对话
CA -> TS: 通知互动以触发潜在事件

== 事件触发：剧情转折 ==
TS -> GM: 触发事件（例如完成3次审问后解锁新线索）
GM -> 数据库: 更新游戏状态，添加新线索
GM -> 玩家: 宣布剧情转折（例如“发现一封隐藏信件！”）
GM -> CA: 更新角色AI行为（例如嫌疑人变得紧张）

== 支线任务：可选任务 ==
玩家 -> 服务器: 调查支线任务（例如搜索隐藏房间）
服务器 -> TS: 检查支线任务触发条件
TS -> GM: 激活支线任务
GM -> 数据库: 存储支线任务状态
GM -> 玩家: 提供支线任务详情（例如“找到丢失的钥匙”）
玩家 -> CA: 互动以完成支线任务（例如说服NPC）
CA -> 数据库: 记录支线任务互动
CA -> 玩家: 提供支线任务奖励（例如额外线索）
CA -> TS: 通知支线任务完成

== 主线剧情：推理阶段 ==
玩家 -> 服务器: 提交推理（例如指控嫌疑人）
服务器 -> GM: 处理推理
GM -> 数据库: 记录推理
GM -> CA: 根据推理调整角色AI回应
CA -> 玩家: 对指控做出反应（例如辩护或认罪）
GM -> TS: 检查推理是否触发游戏结束

== 事件触发：限时挑战 ==
TS -> GM: 触发限时事件（例如“距离破案还有1小时！”）
GM -> 玩家: 宣布挑战（例如“快，凶手正在逃跑！”）
GM -> 数据库: 更新游戏状态

== 高潮与结局 ==
玩家 -> 服务器: 提交最终推理
服务器 -> GM: 评估最终推理
GM -> 数据库: 检索真相数据
GM -> 玩家: 揭晓真相及游戏结果
GM -> CA: 停用角色AI
服务器 -> 数据库: 保存游戏结果
玩家 -> 服务器: 结束会话
服务器 -> 数据库: 归档会话

@enduml